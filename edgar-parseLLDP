#!/usr/bin/perl

my %bonds; my %interfaces;
my $line = "-" x 79 . "\n";

getBonds(\%bonds);
checkBonds(\%bonds, \%interfaces);
checkInterfaces(\%interfaces);
if ( checkLLDPD() == 2)
{
   installLLDPD();
   print "INFO: Sleeping for 40 seconds to make sure LLDP information is gathered.\n";
   sleep 40;
}


checkLLDPStatus();
# Now we can parseLLDP information
parseLLDP(\%interfaces);
summarizeData(\%interfaces);
#use Data::Dumper; print Dumper(%interfaces); exit;
stopLLDP();



exit;

sub stopLLDP
{
   print "INFO: Make sure service is stopped\n";
   open (F, "/usr/sbin/service lldpd stop 2>&1 |");
   close F;
   return;
   
   
}

sub summarizeData
{
   my ($interfaces) = @_;
   print "INFO: Interface Summary is saved to /tmp/interfaceSummary.txt\n";
   open (S, ">/tmp/interfaceSummary.txt");
   #my $fmtLine = "-" x 79 . "\n";
   #print $fmtLine; print "Interface Summary\n"; print $fmtLine;
   foreach my $i ( sort keys %{$interfaces})
   {
      #print $i, "\n";
      my $sw = $$interfaces{$i}{'switch'};
      my $swport = $$interfaces{$i}{'port'};
      #print "INFO: Interface $i is connected to Switch [$sw] port [$swport]\n";
      print S join("::", $sw, $swport, $$interfaces{$i}{'bond'}, $i) . "\n";
   }
   close S;
   return;
}


sub parseLLDP
{
   my ($interfaces) = @_;
   system("/usr/sbin/lldpcli show neighbors > /tmp/lldpInfo.txt");
   
   print "INFO: Parsing LLDPD output\n";
   open (L, "/tmp/lldpInfo.txt");
   while(<L>)
   {
      chomp;
      if (/^Interface:/)
      {
         my $line = $_; $line =~ s/Interface:\s+//g; my @a = split(/,/, $line);
         $lastInterface = $a[0]; $$interfaces{$lastInterface}{'name'} = $lastInterface; next;
      }
      if (/PortID:/)
      {
         my $line = $_; $line =~ s/\s+PortID:\s+ifname\s+//g;      
         $$interfaces{$lastInterface}{'port'} = $line; next;
      }
      if (/SysName:/)
      {
         my $line = $_; $line =~ s/\s+SysName:\s+//g;
         $$interfaces{$lastInterface}{'switch'} = $line;  next;
      }
   }
   close L;
   
   return;
}

sub installLLDPD
{
   print "INFO: Installing LLDPD package\n";
   system("/usr/bin/apt -y install lldpd");
   system("service start lldpd");
   return;
}

sub checkLLDPStatus
{
   print "INFO: Make sure service is started\n";
   open (F, "/usr/sbin/service lldpd status 2>&1 |");
   $serviceStopped = 0;
   while (<F>)
   {
      chomp;
      if (/stop/ || /waiting/ || /Stopped/)
      {
         $serviceStopped = 1;
         print $_, "\n";
      }
   }
   close F;
   if ( $serviceStopped == 1 )
   {
      print "INFO: Service LLDPD is stopped\n";
      print "INFO: Starting LLDPD service and waiting 40 seconds\n";
      system("/usr/sbin/service lldpd start");
      sleep 40;
   }
   else
   {
      print "INFO: Service LLDPD is already running\n";
   }
   return;
   
}

sub checkLLDPD
{
   if ( ! -f "/usr/sbin/lldpcli" )
   {
      return 2;         
   }
   return 1;
}


sub getBonds
{
   my ($bonds) = @_;
   print "INFO: Reading /etc/network/interfaces to get a list of bond(s)\n";
   open (F, "/etc/network/interfaces");
   while (<F>)
   {
      chomp;
      if (/^iface bond\d inet/)
      {
         my (@a) = split(/\s+/);
         $bond = $a[1];
         $$bonds{$bond}{'name'} = $bond;
         print "INFO: Bond $bond was found\n";
      }
   
   }
   close F;
   
}


sub checkBonds
{
   my ($bonds, $interfaces) = @_;
   print "INFO: Checking status of each bond\n";
   foreach $bond ( sort keys %{$bonds})
   {
           print "INFO: Reading status of $bond\n";
           # Now read the bond status
           open (F, "/proc/net/bonding/$bond");
           while(<F>)
           {
              chomp;
              if (/Slave Interface/)
              {
                   my ($j, $int) = split(/:\s/);
                   print "INFO: Interface $int is in bond $bond\n";
                   push(@{$bonds{$bond}{'interfaces'}}, $int);
                   $$interfaces{$int}{'bond'} = $bond;
              }
           if (/Bonding Mode:/)
           {
                   my ($k, $bondMode) = split(/:\s/);
                   $bonds{$bond}{'mode'} = $bondMode;
           }
           }
           close F;
   }
   return;
}



sub checkInterfaces
{
   my ($interfaces) = @_;
   # Now use ethtool to see the link status
   foreach $int (sort keys %interfaces)
   {
           $$interfaces{$int}{'link'} = "N/A";
           print "INFO: Checking status of $int using ethtool\n";
           open (F, "ethtool $int |");
           while(<F>)
           {
                   chomp;
                   if (/Link detected:/)
                   {
                         my ($j, $link) = split(/:\s/);
                         print "INFO: Link status for $int : $link\n";
                         if ( $link eq "no" ) { $link = "**** NO ****" ; }
                         $$interfaces{$int}{'link'} = $link;
                   }
           }
           close F;
   }
}


